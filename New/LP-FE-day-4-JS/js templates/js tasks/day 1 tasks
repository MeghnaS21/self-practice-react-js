JavaScript Basics - Problems
Working with variables and constants:
level 1:

1. Declare two variables: admin and name.
Assign the value "John" to fname.
Copy the value from fname to admin.
Show the value of admin using alert (must output “John”).

2. Create constants for colors in web (hexadecimal) format.

3. Write a program, using the variable declarations above, that displays the data type for
each variable.

4. What will be the result for these expressions?
5 > 4
"apple" > "pineapple"
"2" > "12"
undefined == null
undefined === null



level 2:

1. Write a loop which prompts for a number greater than 100. If the visitor enters another
number – ask them to input again.
The loop must ask for a number until either the visitor enters a number greater than
100 or cancels the input/enters an empty line.
Here we can assume that the visitor only inputs numbers. There’s no need to
implement a special handling for a non-numeric input in this task.

2. Using if..else, write the code which gets a number via prompt and then shows in alert:
1, if the value is greater than zero,
-1, if less than zero,
0, if equals zero.
In this task we assume that the input is always a number.
3. Write a function min(a,b) which returns the least of two numbers a and b.
For instance:
min(2, 5) == 2
min(3, -1) == -1
min(1, 1) == 1



level 3:
1.2. Write a function filterRange(arr, a, b) that gets an array arr, looks for elements with
values higher or equal to a and lower or equal to b and return a result as an array.

For instance:
let arr = [5, 3, 8, 1];
let filtered = filterRange(arr, 1, 4);
alert( filtered ); // 3,1 (matching values)


level 4:

1.Write the function camelize(str) that changes dash-separated words like “my-shortstring” into camel-cased “myShortString”.
That is: removes all dashes, each word after dash becomes uppercased.
Examples:
camelize("background-color") == 'backgroundColor';
camelize("list-style-image") == 'listStyleImage';
camelize("-webkit-transition") == 'WebkitTransition';
P.S. Hint: use split to split the string into an array, transform it and join back.


Create a function unique_elements(arr) that should return an array with unique items
of arr.
For instance:
function unique_elements(arr) {
 /* your code */
}
let strings = ["React Js", "JavaScript", "React Js", "JavaScript",
 "JavaScript", "JavaScript", "React Js", "React Js"
];
alert( unique(strings) ); // React Js, JavaScript




Create a function truncate(str, maxlength) that checks the length of the str and, if it
exceeds maxlength – replaces the end of str with the ellipsis character "…", to make its
length equal to maxlength.
The result of the function should be the truncated (if needed) string.
For instance:

truncate("What I'd like to tell on this topic is:", 20) = "What I'd like to te…"
truncate("Hi everyone!", 20) = "Hi everyone!"

